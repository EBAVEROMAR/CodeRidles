Minutos.cpp
#include <iostream>
#include <map>
#include <vector>
#include <string>

std::map<int, std::vector<std::string>> roman_numerals_1_to_59() {
    return {
        {1, {"I"}}, {2, {"II"}}, {3, {"III"}}, {4, {"IV"}}, {5, {"V"}},
        {6, {"VI"}}, {7, {"VII"}}, {8, {"VIII"}}, {9, {"IX"}}, {10, {"X"}},
        {11, {"XI"}}, {12, {"XII"}}, {13, {"XIII"}}, {14, {"XIV"}}, {15, {"XV"}},
        {16, {"XVI"}}, {17, {"XVII"}}, {18, {"XVIII"}}, {19, {"XIX"}}, {20, {"XX"}},
        {21, {"XXI"}}, {22, {"XXII"}}, {23, {"XXIII"}}, {24, {"XXIV"}}, {25, {"XXV"}},
        {26, {"XXVI"}}, {27, {"XXVII"}}, {28, {"XXVIII"}}, {29, {"XXIX"}}, {30, {"XXX"}},
        {31, {"XXXI"}}, {32, {"XXXII"}}, {33, {"XXXIII"}}, {34, {"XXXIV"}}, {35, {"XXXV"}},
        {36, {"XXXVI"}}, {37, {"XXXVII"}}, {38, {"XXXVIII"}}, {39, {"XXXIX"}}, {40, {"XL"}},
        {41, {"XLI"}}, {42, {"XLII"}}, {43, {"XLIII"}}, {44, {"XLIV"}}, {45, {"XLV"}},
        {46, {"XLVI"}}, {47, {"XLVII"}}, {48, {"XLVIII"}}, {49, {"XLIX"}}, {50, {"L"}},
        {51, {"LI"}}, {52, {"LII"}}, {53, {"LIII"}}, {54, {"LIV"}}, {55, {"LV"}},
        {56, {"LVI"}}, {57, {"LVII"}}, {58, {"LVIII"}}, {59, {"LIX", "LVIIII"}}
    };
}

std::string color_roman_to_positions(const std::string& roman_str, const std::string& sequence) {
    std::string result(sequence.size(), '_'); // Initialize with underscores
    std::string sequence_copy = sequence;
    
    for (char ch : roman_str) {
        size_t idx = sequence_copy.find(ch);
        if (idx != std::string::npos) {
            result[idx] = ch;
            sequence_copy[idx] = '_'; // Mark as used
        }
    }
    
    return result;
}

void print_mapped_variations() {
    std::string sequence = "XLXXIXIVIII";
    auto roman_numerals = roman_numerals_1_to_59();
    
    std::cout << "Mapping Roman numerals to sequence positions:\n";
    for (const auto& [num, variations] : roman_numerals) {
        for (const auto& var : variations) {
            std::string colored = color_roman_to_positions(var, sequence);
            std::cout << num << ": " << var << " -> " << colored << "\n";
        }
    }
}

int main() {
    print_mapped_variations();
    return 0;
}
