from itertools import permutations

def roman_variations():
    # Possible ways to write numbers from 1 to 23 in Roman numerals
    variations = {
        1: ["I"], 2: ["II"], 3: ["III"], 4: ["IV"], 5: ["V"],
        6: ["VI"], 7: ["VII"], 8: ["VIII"], 9: ["IX"], 10: ["X"],
        11: ["XI"], 12: ["XII"], 13: ["XIII"], 14: ["XIV"], 15: ["XV"],
        16: ["XVI"], 17: ["XVII"], 18: ["XVIII"], 19: ["XIX"], 20: ["XX"],
        21: ["XXI"], 22: ["XXII"], 23: ["XXIII"]
    }
    return variations

def map_to_positions(roman_str, sequence):
    """ Map a given Roman numeral string onto the fixed sequence "XIXIVIII" """
    positions = list(sequence)
    roman_chars = list(roman_str)
    coloring = ['_' for _ in sequence]  # Default uncolored positions
    
    for i, char in enumerate(roman_chars):
        if char in positions:
            idx = positions.index(char)  # Find the first available position
            coloring[idx] = char  # Assign the Roman numeral to this position
            positions[idx] = '_'  # Mark this position as used
    
    return ''.join(coloring)

def main():
    sequence = "XIXIVIII"
    variations = roman_variations()
    
    print("Possible ways to color positions:")
    for num, var_list in variations.items():
        for var in var_list:
            colored = map_to_positions(var, sequence)
            print(f"{num}: {var} -> {colored}")

if _name_ == "_main_":
    main()
